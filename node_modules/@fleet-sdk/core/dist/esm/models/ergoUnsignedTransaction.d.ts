import { BoxAmounts, BoxCandidate, BuildOutputType, EIP12UnsignedTransaction, UnsignedTransaction } from "@fleet-sdk/common";
import { ErgoUnsignedInput } from "./ergoUnsignedInput";
type Input = ErgoUnsignedInput;
type Output = BoxCandidate<bigint>;
type ReadOnlyInputs = readonly Input[];
type ReadOnlyOutputs = readonly Output[];
type TransactionType<T> = T extends "default" ? UnsignedTransaction : EIP12UnsignedTransaction;
export declare class ErgoUnsignedTransaction {
    private readonly _inputs;
    private readonly _dataInputs;
    private readonly _outputs;
    constructor(inputs: Input[], dataInputs: Input[], outputs: Output[]);
    get id(): string;
    get inputs(): ReadOnlyInputs;
    get dataInputs(): ReadOnlyInputs;
    get outputs(): ReadOnlyOutputs;
    get burning(): BoxAmounts;
    toPlainObject(): UnsignedTransaction;
    toPlainObject<T extends BuildOutputType>(outputType: T): TransactionType<T>;
    toEIP12Object(): EIP12UnsignedTransaction;
    toBytes(): Uint8Array;
}
export {};
