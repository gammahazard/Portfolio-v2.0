import { some } from "@fleet-sdk/common";
import { ensureBigInt, isDefined, isEmpty } from "@fleet-sdk/common";
import { concatBytes, hexToBytes } from "@noble/hashes/utils";
import { vlqEncode, vqlEncodeBigInt } from "../vlq";
export function serializeBox(box, distinctTokenIds) {
    const bytes = concatBytes(vqlEncodeBigInt(ensureBigInt(box.value)), hexToBytes(box.ergoTree), vlqEncode(box.creationHeight), serializeTokens(box.assets, distinctTokenIds), serializeRegisters(box.additionalRegisters));
    if (isDefined(distinctTokenIds)) {
        return bytes;
    }
    else {
        if (!isBox(box)) {
            throw new Error("Invalid box type.");
        }
        return concatBytes(bytes, hexToBytes(box.transactionId), vlqEncode(box.index));
    }
}
function isBox(box) {
    const castedBox = box;
    return isDefined(castedBox.transactionId) && isDefined(castedBox.index);
}
function serializeTokens(tokens, tokenIds) {
    if (isEmpty(tokens)) {
        return Uint8Array.from([0]);
    }
    if (some(tokenIds)) {
        return concatBytes(vlqEncode(tokens.length), ...tokens.map((token) => concatBytes(vlqEncode(tokenIds.indexOf(token.tokenId)), vqlEncodeBigInt(ensureBigInt(token.amount)))));
    }
    return concatBytes(vlqEncode(tokens.length), ...tokens.map((token) => concatBytes(hexToBytes(token.tokenId), vqlEncodeBigInt(ensureBigInt(token.amount)))));
}
function serializeRegisters(registers) {
    let keys = Object.keys(registers);
    if (isEmpty(keys)) {
        return Uint8Array.from([0]);
    }
    const serializedRegisters = [];
    keys = keys.sort();
    for (const key of keys) {
        const val = registers[key];
        if (isDefined(val)) {
            serializedRegisters.push(hexToBytes(val));
        }
    }
    return concatBytes(vlqEncode(serializedRegisters.length), concatBytes(...serializedRegisters));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94U2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJpYWxpemVyL3NpZ21hL2JveFNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUtMLElBQUksRUFFTCxNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFJcEQsTUFBTSxVQUFVLFlBQVksQ0FDMUIsR0FBaUQsRUFDakQsZ0JBQTJCO0lBRTNCLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FDdkIsZUFBZSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDeEMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFDeEIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFDN0IsZUFBZSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsRUFDN0Msa0JBQWtCLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQzVDLENBQUM7SUFFRixJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1FBQy9CLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDdEM7UUFFRCxPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDaEY7QUFDSCxDQUFDO0FBRUQsU0FBUyxLQUFLLENBQW1CLEdBQWlEO0lBQ2hGLE1BQU0sU0FBUyxHQUFHLEdBQWEsQ0FBQztJQUVoQyxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsTUFBNkIsRUFBRSxRQUFtQjtJQUN6RSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNuQixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdCO0lBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDbEIsT0FBTyxXQUFXLENBQ2hCLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ3hCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3RCLFdBQVcsQ0FDVCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDMUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDNUMsQ0FDRixDQUNGLENBQUM7S0FDSDtJQUVELE9BQU8sV0FBVyxDQUNoQixTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUN4QixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUN0QixXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQ3BGLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFNBQWdDO0lBQzFELElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM3QjtJQUVELE1BQU0sbUJBQW1CLEdBQWlCLEVBQUUsQ0FBQztJQUM3QyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFrQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNDO0tBQ0Y7SUFFRCxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEVBQUUsV0FBVyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0FBQ2pHLENBQUMifQ==