"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeBox = void 0;
const common_1 = require("@fleet-sdk/common");
const common_2 = require("@fleet-sdk/common");
const utils_1 = require("@noble/hashes/utils");
const vlq_1 = require("../vlq");
function serializeBox(box, distinctTokenIds) {
    const bytes = (0, utils_1.concatBytes)((0, vlq_1.vqlEncodeBigInt)((0, common_2.ensureBigInt)(box.value)), (0, utils_1.hexToBytes)(box.ergoTree), (0, vlq_1.vlqEncode)(box.creationHeight), serializeTokens(box.assets, distinctTokenIds), serializeRegisters(box.additionalRegisters));
    if ((0, common_2.isDefined)(distinctTokenIds)) {
        return bytes;
    }
    else {
        if (!isBox(box)) {
            throw new Error("Invalid box type.");
        }
        return (0, utils_1.concatBytes)(bytes, (0, utils_1.hexToBytes)(box.transactionId), (0, vlq_1.vlqEncode)(box.index));
    }
}
exports.serializeBox = serializeBox;
function isBox(box) {
    const castedBox = box;
    return (0, common_2.isDefined)(castedBox.transactionId) && (0, common_2.isDefined)(castedBox.index);
}
function serializeTokens(tokens, tokenIds) {
    if ((0, common_2.isEmpty)(tokens)) {
        return Uint8Array.from([0]);
    }
    if ((0, common_1.some)(tokenIds)) {
        return (0, utils_1.concatBytes)((0, vlq_1.vlqEncode)(tokens.length), ...tokens.map((token) => (0, utils_1.concatBytes)((0, vlq_1.vlqEncode)(tokenIds.indexOf(token.tokenId)), (0, vlq_1.vqlEncodeBigInt)((0, common_2.ensureBigInt)(token.amount)))));
    }
    return (0, utils_1.concatBytes)((0, vlq_1.vlqEncode)(tokens.length), ...tokens.map((token) => (0, utils_1.concatBytes)((0, utils_1.hexToBytes)(token.tokenId), (0, vlq_1.vqlEncodeBigInt)((0, common_2.ensureBigInt)(token.amount)))));
}
function serializeRegisters(registers) {
    let keys = Object.keys(registers);
    if ((0, common_2.isEmpty)(keys)) {
        return Uint8Array.from([0]);
    }
    const serializedRegisters = [];
    keys = keys.sort();
    for (const key of keys) {
        const val = registers[key];
        if ((0, common_2.isDefined)(val)) {
            serializedRegisters.push((0, utils_1.hexToBytes)(val));
        }
    }
    return (0, utils_1.concatBytes)((0, vlq_1.vlqEncode)(serializedRegisters.length), (0, utils_1.concatBytes)(...serializedRegisters));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94U2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJpYWxpemVyL3NpZ21hL2JveFNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBTzJCO0FBQzNCLDhDQUFxRTtBQUNyRSwrQ0FBOEQ7QUFFOUQsZ0NBQW9EO0FBSXBELFNBQWdCLFlBQVksQ0FDMUIsR0FBaUQsRUFDakQsZ0JBQTJCO0lBRTNCLE1BQU0sS0FBSyxHQUFHLElBQUEsbUJBQVcsRUFDdkIsSUFBQSxxQkFBZSxFQUFDLElBQUEscUJBQVksRUFBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDeEMsSUFBQSxrQkFBVSxFQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFDeEIsSUFBQSxlQUFTLEVBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUM3QixlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxFQUM3QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FDNUMsQ0FBQztJQUVGLElBQUksSUFBQSxrQkFBUyxFQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDL0IsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN0QztRQUVELE9BQU8sSUFBQSxtQkFBVyxFQUFDLEtBQUssRUFBRSxJQUFBLGtCQUFVLEVBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUEsZUFBUyxFQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ2hGO0FBQ0gsQ0FBQztBQXJCRCxvQ0FxQkM7QUFFRCxTQUFTLEtBQUssQ0FBbUIsR0FBaUQ7SUFDaEYsTUFBTSxTQUFTLEdBQUcsR0FBYSxDQUFDO0lBRWhDLE9BQU8sSUFBQSxrQkFBUyxFQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFBLGtCQUFTLEVBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxNQUE2QixFQUFFLFFBQW1CO0lBQ3pFLElBQUksSUFBQSxnQkFBTyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7SUFFRCxJQUFJLElBQUEsYUFBSSxFQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ2xCLE9BQU8sSUFBQSxtQkFBVyxFQUNoQixJQUFBLGVBQVMsRUFBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ3hCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3RCLElBQUEsbUJBQVcsRUFDVCxJQUFBLGVBQVMsRUFBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUMxQyxJQUFBLHFCQUFlLEVBQUMsSUFBQSxxQkFBWSxFQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUM1QyxDQUNGLENBQ0YsQ0FBQztLQUNIO0lBRUQsT0FBTyxJQUFBLG1CQUFXLEVBQ2hCLElBQUEsZUFBUyxFQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFDeEIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDdEIsSUFBQSxtQkFBVyxFQUFDLElBQUEsa0JBQVUsRUFBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBQSxxQkFBZSxFQUFDLElBQUEscUJBQVksRUFBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUNwRixDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxTQUFnQztJQUMxRCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksSUFBQSxnQkFBTyxFQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2pCLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7SUFFRCxNQUFNLG1CQUFtQixHQUFpQixFQUFFLENBQUM7SUFDN0MsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBa0MsQ0FBQyxDQUFDO1FBQzFELElBQUksSUFBQSxrQkFBUyxFQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFBLGtCQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMzQztLQUNGO0lBRUQsT0FBTyxJQUFBLG1CQUFXLEVBQUMsSUFBQSxlQUFTLEVBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBQSxtQkFBVyxFQUFDLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0FBQ2pHLENBQUMifQ==