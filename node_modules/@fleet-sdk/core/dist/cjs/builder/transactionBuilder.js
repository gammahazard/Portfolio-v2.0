"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = exports.FEE_CONTRACT = exports.RECOMMENDED_MIN_FEE_VALUE = void 0;
const common_1 = require("@fleet-sdk/common");
const common_2 = require("@fleet-sdk/common");
const errors_1 = require("../errors");
const nonStandardizedMinting_1 = require("../errors/nonStandardizedMinting");
const models_1 = require("../models");
const ergoUnsignedTransaction_1 = require("../models/ergoUnsignedTransaction");
const outputBuilder_1 = require("./outputBuilder");
const pluginContext_1 = require("./pluginContext");
const selector_1 = require("./selector");
const transactionBuilderSettings_1 = require("./transactionBuilderSettings");
exports.RECOMMENDED_MIN_FEE_VALUE = BigInt(1100000);
exports.FEE_CONTRACT = "1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304";
class TransactionBuilder {
    _inputs;
    _dataInputs;
    _outputs;
    _settings;
    _creationHeight;
    _selectorCallbacks;
    _changeAddress;
    _feeAmount;
    _burning;
    _plugins;
    constructor(creationHeight) {
        this._inputs = new models_1.InputsCollection();
        this._dataInputs = new models_1.InputsCollection();
        this._outputs = new models_1.OutputsCollection();
        this._settings = new transactionBuilderSettings_1.TransactionBuilderSettings();
        this._creationHeight = creationHeight;
    }
    get inputs() {
        return this._inputs;
    }
    get dataInputs() {
        return this._dataInputs;
    }
    get outputs() {
        return this._outputs;
    }
    get changeAddress() {
        return this._changeAddress;
    }
    get fee() {
        return this._feeAmount;
    }
    get burning() {
        return this._burning;
    }
    get settings() {
        return this._settings;
    }
    get creationHeight() {
        return this._creationHeight;
    }
    /**
     * Syntax sugar to be used in composition with another methods
     *
     * @example
     * ```
     * new TransactionBuilder(height)
     *   .from(inputs)
     *   .and.from(otherInputs);
     * ```
     */
    get and() {
        return this;
    }
    from(inputs) {
        this._inputs.add(inputs);
        return this;
    }
    to(outputs, options) {
        this._outputs.add(outputs, options);
        return this;
    }
    withDataFrom(dataInputs, options) {
        this._dataInputs.add(dataInputs, options);
        return this;
    }
    sendChangeTo(address) {
        if (typeof address === "string") {
            this._changeAddress = (0, common_2.isHex)(address)
                ? models_1.ErgoAddress.fromErgoTree(address, common_1.Network.Mainnet)
                : models_1.ErgoAddress.fromBase58(address);
        }
        else {
            this._changeAddress = address;
        }
        return this;
    }
    payFee(amount) {
        this._feeAmount = (0, common_2.ensureBigInt)(amount);
        return this;
    }
    payMinFee() {
        this.payFee(exports.RECOMMENDED_MIN_FEE_VALUE);
        return this;
    }
    burnTokens(tokens) {
        if (!this._burning) {
            this._burning = new models_1.TokensCollection();
        }
        this._burning.add(tokens);
        return this;
    }
    configure(callback) {
        callback(this._settings);
        return this;
    }
    configureSelector(selectorCallback) {
        if ((0, common_1.isUndefined)(this._selectorCallbacks)) {
            this._selectorCallbacks = [];
        }
        this._selectorCallbacks.push(selectorCallback);
        return this;
    }
    extend(plugins) {
        if (!this._plugins) {
            this._plugins = [];
        }
        this._plugins.push({ execute: plugins, pending: true });
        return this;
    }
    eject(ejector) {
        ejector({
            inputs: this.inputs,
            dataInputs: this.dataInputs,
            outputs: this.outputs,
            burning: this.burning,
            settings: this.settings,
            selection: (selectorCallback) => {
                this.configureSelector(selectorCallback);
            }
        });
        return this;
    }
    build() {
        if ((0, common_2.some)(this._plugins)) {
            const context = (0, pluginContext_1.createPluginContext)(this);
            for (const plugin of this._plugins) {
                if (plugin.pending) {
                    plugin.execute(context);
                    plugin.pending = false;
                }
            }
        }
        if (this._isMinting()) {
            if (this._isMoreThanOneTokenBeingMinted()) {
                throw new errors_1.MalformedTransaction("only one token can be minted per transaction.");
            }
            if (this._isTheSameTokenBeingMintedOutsideTheMintingBox()) {
                throw new nonStandardizedMinting_1.NonStandardizedMinting("EIP-4 tokens cannot be minted from outside the minting box.");
            }
        }
        const outputs = this.outputs.clone();
        if ((0, common_2.isDefined)(this._feeAmount)) {
            outputs.add(new outputBuilder_1.OutputBuilder(this._feeAmount, exports.FEE_CONTRACT));
        }
        const selector = new selector_1.BoxSelector(this.inputs.toArray());
        if ((0, common_2.some)(this._selectorCallbacks)) {
            for (const selectorCallBack of this._selectorCallbacks) {
                selectorCallBack(selector);
            }
        }
        const target = (0, common_2.some)(this._burning)
            ? outputs.sum({ tokens: this._burning.toArray() })
            : outputs.sum();
        let inputs = selector.select(target);
        if ((0, common_2.isDefined)(this._changeAddress)) {
            let change = (0, common_1.utxoSumResultDiff)((0, common_2.utxoSum)(inputs), target);
            if ((0, common_2.some)(change.tokens)) {
                let requiredNanoErgs = this._calcRequiredNanoErgsForChange(change.tokens.length);
                while (requiredNanoErgs > change.nanoErgs) {
                    inputs = selector.select({
                        nanoErgs: target.nanoErgs + requiredNanoErgs,
                        tokens: target.tokens
                    });
                    change = (0, common_1.utxoSumResultDiff)((0, common_2.utxoSum)(inputs), target);
                    requiredNanoErgs = this._calcRequiredNanoErgsForChange(change.tokens.length);
                }
                const chunkedTokens = (0, common_2.chunk)(change.tokens, this._settings.maxTokensPerChangeBox);
                for (const tokens of chunkedTokens) {
                    const nanoErgs = change.nanoErgs > requiredNanoErgs
                        ? change.nanoErgs - requiredNanoErgs + outputBuilder_1.SAFE_MIN_BOX_VALUE
                        : outputBuilder_1.SAFE_MIN_BOX_VALUE;
                    change.nanoErgs -= nanoErgs;
                    outputs.add(new outputBuilder_1.OutputBuilder(nanoErgs, this._changeAddress).addTokens(tokens));
                }
            }
            if (change.nanoErgs > common_2._0n) {
                outputs.add(new outputBuilder_1.OutputBuilder(change.nanoErgs, this._changeAddress));
            }
        }
        for (const input of inputs) {
            if (!input.isValid()) {
                throw new errors_1.InvalidInput(input.boxId);
            }
        }
        const unsignedTransaction = new ergoUnsignedTransaction_1.ErgoUnsignedTransaction(inputs, this.dataInputs.toArray(), outputs
            .toArray()
            .map((output) => output.setCreationHeight(this._creationHeight, { replace: false }).build(inputs)));
        let burning = unsignedTransaction.burning;
        if (burning.nanoErgs > common_2._0n) {
            throw new errors_1.MalformedTransaction("it's not possible to burn ERG.");
        }
        if ((0, common_2.some)(burning.tokens) && (0, common_2.some)(this._burning)) {
            burning = (0, common_1.utxoSumResultDiff)(burning, { nanoErgs: common_2._0n, tokens: this._burning.toArray() });
        }
        if (!this._settings.canBurnTokens && (0, common_2.some)(burning.tokens)) {
            throw new errors_1.NotAllowedTokenBurning();
        }
        return unsignedTransaction;
    }
    _isMinting() {
        for (const output of this._outputs) {
            if (output.minting) {
                return true;
            }
        }
        return false;
    }
    _isMoreThanOneTokenBeingMinted() {
        let mintingCount = 0;
        for (const output of this._outputs) {
            if ((0, common_2.isDefined)(output.minting)) {
                mintingCount++;
                if (mintingCount > 1) {
                    return true;
                }
            }
        }
        return false;
    }
    _isTheSameTokenBeingMintedOutsideTheMintingBox() {
        const mintingTokenId = this._getMintingTokenId();
        if ((0, common_1.isUndefined)(mintingTokenId)) {
            return false;
        }
        for (const output of this._outputs) {
            if (output.tokens.contains(mintingTokenId)) {
                return true;
            }
        }
        return false;
    }
    _getMintingTokenId() {
        let tokenId = undefined;
        for (const output of this._outputs) {
            if (output.minting) {
                tokenId = output.minting.tokenId;
                break;
            }
        }
        return tokenId;
    }
    _calcChangeLength(tokensLength) {
        return Math.ceil(tokensLength / this._settings.maxTokensPerChangeBox);
    }
    _calcRequiredNanoErgsForChange(tokensLength, minNanoErgsPerBox = outputBuilder_1.SAFE_MIN_BOX_VALUE) {
        return minNanoErgsPerBox * BigInt(this._calcChangeLength(tokensLength));
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,